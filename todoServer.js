/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const PORT = 3000;

const app = express();
let TODOS = [];
let TODONUM = 1;



// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser.json());

app.get('/', (req, res) => {
  res.sendFile(__dirname+'/index.html')
})

app.get('/todos', (req, res) => {
  res.json(TODOS);
})

app.get('/todos/:id', (req,res) => {
  let id = req.params.id;
  let todo = findTodo(id);
  if(todo){
    res.json(todo);
  }else{
    res.status(404).send('Todo not found');
  }
})

app.put('/todos/:id', (req,res) => {
  let id = req.params.id;
  let todo = req.body;
  if(updateTodo(id, todo)){
    res.send('Todo was updated');
  }else{
    res.status(404).send('Todo was not found');
  }
})

app.post('/todos', (req, res) => {
  if(createTodo(req.body)){
    res.status(201).json({'id':TODONUM-1})
  } else{
    res.status(400).send('Could not create Todo')
  }
})

app.delete('/todos/:id', (req, res) => {
  let id = req.params.id;
  if(deleteTodo(id)){
    res.send('Todo Deleted Successfully');
  }else{
    res.status(404).send("Couldn't delete Todo");
  }
})

function deleteTodo(id){
  for(let i = 0; i<TODOS.length; i++){
    if(TODOS[i]['Id'] == id){
      TODOS.splice(i, 1);
      updateFile()
      return true;
    }
  }
  return false;
}

function updateTodo(id, todo){
  let oldTodo = findTodo(id)
  if(oldTodo){
    oldTodo['title'] = todo['title']
    oldTodo['completed'] = todo['completed']
    updateFile()
    return true;
  }else{
    return false;
  }
}

function findTodo(id){
  for(let i = 0; i<TODOS.length; i++){
    if(TODOS[i]['Id'] == id){
      return TODOS[i];
    }
  }
  return false
}

function createTodo(todo){
  try{
    console.log(TODOS);
    console.log(todo);
    todo['Id'] = TODONUM;
    TODOS.push(todo);
    TODONUM++;
    updateFile()
    return true
  }
  catch{
    return false
  }
}

function updateFile(){
  let data = {TODONUM, TODOS}
  fs.writeFile('Todos.json', JSON.stringify(data), err => {
    if(err){
      console.error(err);
    }
  })
}

function readFile(){
  let data = fs.readFileSync('Todos.json', 'utf-8');
  parsedData = JSON.parse(data);
  TODONUM = parsedData['TODONUM'] ? parsedData['TODONUM'] : 1;
  TODOS = parsedData['TODOS']? parsedData['TODOS'] : [];
}

app.use((req, res, next) => {
  res.status(404).send('Route not found!!!!!!!')
})

app.listen(PORT, ()=>{
  console.log(`Server is running on the port ${PORT}`);
  readFile();
})

module.exports = app;
